<?xml version="1.0" encoding="UTF-8"?>
<project name="ServerPack" default="dist" basedir=".">
	<description>Lineage 2 - Oath of Blood</description>

	<property name="src" location="sources"/>
	<property name="lib" location="libraries"/>
	<property name="build" location="build"/>
	<property name="build.classes" location="${build}/classes"/>
	<property name="build.dist" location="${build}/dist"/>
	<property name="build.dist.ls" location="${build.dist}/loginserver"/>
	<property name="build.dist.gs" location="${build.dist}/gameserver"/>

	<path id="classpath">
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<pathconvert property="jar.list" pathsep=" " refid="classpath">
		<mapper type="flatten"/>
	</pathconvert>

	<target name="init" depends="clean,checkRequirements" description="Create the output directories.">
		<mkdir dir="${build}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.dist}" />
		<mkdir dir="${build.dist.ls}" />
		<mkdir dir="${build.dist.gs}" />
	</target>

	<target name="compile" depends="init" description="Compile the source.">
		<javac srcdir="${src}" classpathref="classpath" destdir="${build.classes}" debug="true" debuglevel="lines,vars,source" includeantruntime="false" encoding="UTF-8" />
	</target>

	<target name="jar" depends="compile" description="Create the jar file">
		<jar destfile="${build}/l2jserver.jar">
			<fileset dir="${build.classes}"/>
			<manifest>
				<attribute name="Main-Class" value="net.sf.l2j.Server" />
				<attribute name="Class-Path" value="${jar.list}"/>
			</manifest>
		</jar>
		
		<copy todir="${build.dist.ls}">
			<fileset dir="${build}">
				<include name="l2jserver.jar"/>
			</fileset>
		</copy>
		<copy todir="${build.dist.gs}">
			<fileset dir="${build}">
				<include name="l2jserver.jar"/>
			</fileset>
		</copy>
	</target>

	<target name="dist" depends="jar">
		<copy todir="${build.dist.ls}">
			<fileset dir="${src}">
				<include name="log.cfg"/>
				<include name="banned_ip.cfg"/>
				<include name="console.cfg"/>
			</fileset>
		</copy>
		<copy todir="${build.dist.gs}">
			<fileset dir="${src}">
				<include name="log.cfg"/>
				<include name="console.cfg"/>
			</fileset>
		</copy>
		<copy todir="${build.dist.ls}">
			<fileset dir="${src}/../lib">
				<include name="c3p0-0.9.1.jar"/>
				<include name="mysql-connector-java-5.0.4-bin.jar"/>
				<include name="javolution.jar"/>
			</fileset>
		</copy>
		<copy todir="${build.dist.gs}">
			<fileset dir="${src}/../lib">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<copy todir="${build.dist.ls}">
			<fileset dir="dist">
				<include name="startAccountManager.*"/>
				<include name="startSQLAccountManager.*"/>
				<include name="LoginServer_loop.sh"/>
				<include name="startLoginServer.*"/>
				<include name="RegisterGameServer.*"/>
			</fileset>
		</copy>
		<copy todir="${build.dist.gs}">
			<fileset dir="dist">
				<include name="GameServer_loop.sh"/>
				<include name="startGameServer.*"/>
				<include name="hibernate.cfg.xml"/>
			</fileset>
		</copy>
		
		<fixcrlf srcdir="${build.dist.gs}" eol="lf" eof="remove" includes="**/*.sh" />
		<fixcrlf srcdir="${build.dist.ls}" eol="lf" eof="remove" includes="**/*.sh" />
		<fixcrlf srcdir="${build.dist.gs}" eol="crlf" eof="remove" includes="**/*.bat" />
		<fixcrlf srcdir="${build.dist.ls}" eol="crlf" eof="remove" includes="**/*.bat" />

		<mkdir dir="${build.dist.gs}/log" />
		<mkdir dir="${build.dist.ls}/log" />
		<mkdir dir="${build.dist.gs}/config" />
		<mkdir dir="${build.dist.ls}/config" />
		<mkdir dir="${build.dist.gs}/data" />

		<copy todir="${build.dist.gs}/config">
			<fileset dir="java/config">
				<include name="*.properties"/>
				<exclude name="loginserver.properties" />
			</fileset>
		</copy>
		<copy todir="${build.dist.ls}/config">
			<fileset dir="java/config">
				<include name="loginserver.properties"/>
				<include name="telnet.properties"/>
			</fileset>
		</copy>
		<copy todir="${build.dist.gs}/data">
			<fileset dir="data">
				<include name="*.*"/>
			</fileset>
		</copy>

		<!-- <zip destfile="${build}/l2j-server.zip" basedir="${build.dist}" /> -->
	</target>

	<target name="clean" description="Remove the output directories">
		<delete dir="${build}"/>
	</target>

	<target name="checkRequirements" description="Check requirements.">
		<echo message="Verification of your JDK version."/>
		<available classname="java.util.stream.Stream" property="JDK17.present" />
		<fail unless="JDK17.present" message="JDK17 is required, but your version is Java ${ant.java.version}. Install latest JDK." />
	</target>
</project>